TimeRead <- survey_data$TimeReading
TimeTV <- survey_data$TimeTV
TimeTV.hrs <- survey_data$TimeTV/60
TimeRead <- survey_data$TimeReading
lm(TimeRead ~ TimeTV)
lm(TimeRead ~ TimeTV.hrs)
plot(survey_data$TimeReading, survey_data$TimeTV/60,
type = "n",
ylab = "TimeTV(hrs)",
xlab = "TimeReading(hrs)")
# Adding Point with shapes determined by happiness index
points(survey_data$TimeReading, survey_data$TimeTV/60,
pch = survey_data$Happiness )
plot(survey_data$TimeReading, survey_data$TimeTV/60,
type = "n",
ylab = "TimeTV(hrs)",
xlab = "TimeReading(hrs)")
# Adding Point with shapes determined by happiness index
points(survey_data$TimeReading, survey_data$TimeTV/60,
pch = as.numeric(survey_data$Happiness) )
head(survey_data)
plot(survey_data$TimeTV/60, survey_data$Happiness,
type = "n",
ylab = "Happiness Index",
xlab = "TVTime(hrs)")
# Adding Point with shapes determined by happiness index
points(survey_data$TimeTV/60, survey_data$Happiness )
plot(survey_data$TimeTV/60, survey_data$Happiness,
type = "n",
ylab = "Happiness Index",
xlab = "TVTime(hrs)")
# Adding Point with shapes determined by happiness index
points(survey_data$TimeTV/60, survey_data$Happiness )
trend2 <- supsmu(survey_data$TimeTV/60, survey_data$Happiness, bass = 10)
lines(trend2)
plot(survey_data$TimeTV/60, survey_data$Happiness,
type = "n",
ylab = "Happiness Index",
xlab = "TVTime(hrs)")
# Adding Point with shapes determined by happiness index
points(survey_data$TimeTV/60, survey_data$Happiness,
pch = survey_data$Gender)
trend2 <- supsmu(survey_data$TimeTV/60, survey_data$Happiness, bass = 10)
lines(trend2)
#Adding Legend for the Gender
legend("topright", pch = c(0,1),
legend = c("M","F"))
# Assignment: 6.1: GSS 2016 Survey Data
# Name: SAMANTA, ARINDAM
# Date: 4 JANUARY 2020
# TASK 6.1
rm(list = ls())
# Load the libraries needed
library(ggplot2)
##library(tidyr)
## library(readr)
## library(pastecs)
# Reading the file into a dataframe:acs
survey_data <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
# Viewing a sample of the data from the data frame
## head(survey_data)
#2. Structure of the dataframe
## str(survey_data)
#2. No. of observations/rows
## nrow(survey_data)
#2. No of variables/columns
## ncol(survey_data)
head(gss-2016)
# TASK 6.1
rm(list = ls())
# Assignment: 6.1: GSS 2016 Survey Data
# Name: SAMANTA, ARINDAM
# Date: 4 JANUARY 2020
# TASK 6.1
rm(list = ls())
# Load the libraries needed
library(ggplot2)
##library(tidyr)
## library(readr)
## library(pastecs)
# Reading the file into a dataframe:acs
gss-2016 <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
# Viewing a sample of the data from the data frame
head(gss-2016)
#2. Structure of the dataframe
## str(survey_data)
# Assignment: 6.1: GSS 2016 Survey Data
# Name: SAMANTA, ARINDAM
# Date: 4 JANUARY 2020
# TASK 6.1
rm(list = ls())
# Load the libraries needed
library(ggplot2)
##library(tidyr)
## library(readr)
## library(pastecs)
# Reading the file into a dataframe:acs
gss2016 <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
# Viewing a sample of the data from the data frame
head(gss2016)
gss2016 <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
library(ggplot2)
##library(tidyr)
library(readr)
gss2016 <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
head(gss2016)
str(gss2016)
head(gss2016,"Child")
head(gss2016,"CHILDS")
gss2016.p1 <- gss2016[, c("SIBS","CHILDS","SEX")]
head(gss2016.p1)
gss2016.sub <- gss2016[, c("SIBS","CHILDS","SEX")]
head(gss2016.sub)
str(gss2016.sub)
gss2016.sub %>%
cor(SIBS, CHILDS)
cor(gss2016.sub$SIBS, gss2016.sub$CHILDS)
cor(gss2016.sub$SIBS, gss2016.sub$CHILDS, use = "pairwise.complete.obs")
cor(gss2016.sub$CHILDS,gss2016.sub$SIBS, use = "pairwise.complete.obs")
ggplot(data = gss2016.sub, aes(x = CHILDS, y = SIBS)) +
geom_point()
library(ggplot2)
ggplot(data = gss2016.sub, aes(x = CHILDS, y = SIBS)) +
geom_point()
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS)) +
geom_point()
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS)) +
geom_point(position = "jitter")
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS)) +
geom_point(position = "jitter") +
geom_abline()
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS)) +
geom_jitter(width = 0.05, height = 0.05) +
geom_smooth(method = "glm", method.args = list(family = 'poisson'))
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS)) +
geom_jitter(width = 0.05, height = 0.05) +
geom_smooth(method = "glm", method.args = list(family = 'poisson'))
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS)) +
geom_jitter(width = 0.05, height = 0.05) +
geom_smooth()
knitr::opts_chunk$set(echo = FALSE)
gss2016 <- read_csv("~/GitHub/BU-DSC/dataset/gss-2016.csv")
library(dplyr)
library(ggplot2)
library(readr)
gss2016 <- read_csv("~/GitHub/BU-DSC/dataset/gss-2016.csv")
gss2016 <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
library(dplyr)
library(ggplot2)
library(readr)
gss2016 <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
gss2016.sub <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv", col_names = TRUE, cols_only("SIBS","CHILD","SEX"))
gss2016 <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
gss2016 <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
gss2016 <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv")
problem(gss2016)
spec(gss2016)
mycols <- cols_only(
CHILDS = col_double(),
SIBS = col_double(),
SEX = col_double()
)
gss2016.sub <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv",
nrow = 100,
col_types = mycols)
mycols <- cols_only(
CHILDS = col_double(),
SIBS = col_double(),
SEX = col_double()
)
gss2016.sub <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv",
## nrow = 100,
col_types = mycols)
str(gss2016.sub)
# problem(gss2016.sub)
mycols <- cols_only(
CHILDS = col_double(),
SIBS = col_double(),
SEX = col_double()
)
gss2016.sub <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv",
## nrow = 100,
col_types = mycols)
str(gss2016.sub)
# problem(gss2016.sub)
mycols <- cols_only(
CHILDS = col_double(),
SIBS = col_double(),
SEX = col_double()
)
gss2016.sub <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv",
## nrow = 100,
col_types = mycols)
str(gss2016.sub)
# problem(gss2016.sub)
library(dplyr)
library(ggplot2)
library(readr)
library(dplyr)
library(ggplot2)
library(readr)
library(dplyr)
library(ggplot2)
library(readr)
library(dplyr)
library(ggplot2)
library(readr)
mycols <- cols_only(
CHILDS = col_double(),
SIBS = col_double(),
SEX = col_double()
)
gss2016.sub <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv",
## nrow = 100,
col_types = mycols)
str(gss2016.sub)
# problem(gss2016.sub)
summary(gss2016.sub$CHILDS)
gss2016.sub %>%
group_by(CHILDS) %>%
summarize(n())
## summary(gss2016.sub$CHILDS)
gss2016.sub %>%
group_by(CHILDS,SIBS) %>%
summarize(n())
## summary(gss2016.sub$CHILDS)
## Summarizing the data set by # CHILDS
gss2016.sub %>%
group_by(CHILDS) %>%
summarize(n())
## Summarizing the data set by # SIBLINGS
gss2016.sub %>%
group_by(SIBS) %>%
summarize(n())
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
library("MASS", lib.loc="C:/Users/saman/.conda/envs/renv/Lib/R/library")
install.packages("MASS")
library("MASS", lib.loc="C:/Users/saman/.conda/envs/renv/Lib/R/library")
install.packages("corrplot")
library("corrplot", lib.loc="C:/Users/saman/.conda/envs/renv/Lib/R/library")
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
install.packages(c("BH", "bit", "boot", "caret", "caTools", "cli", "fansi", "farver", "foreign", "hms", "knitr", "mime", "ModelMetrics", "odbc", "pillar", "prettyunits", "psych", "RCurl", "recipes", "RJSONIO", "sparklyr", "SQUAREM", "stringi", "tinytex", "vctrs", "xfun", "xts", "zoo"))
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
corrMat <- cor(gss2016.sub$CHILDS,gss2016.sub$SIBS, use = "pairwise.complete.obs")
corrMat <- cor(gss2016.sub$CHILDS,gss2016.sub$SIBS, use = "pairwise.complete.obs")
corrplot(corrMat, method = "eclipse")
corrMat <- cor(gss2016.sub$CHILDS,gss2016.sub$SIBS, use = "pairwise.complete.obs")
corrplot(corrMat, method = "ellipse")
corrMat <- cor(gss2016.sub)
corrplot(corrMat, method = "ellipse")
corrMat <- cor(gss2016.sub,use = "pairwise.complete.obs")
corrplot(corrMat, method = "ellipse")
# Creating a scatter plot with the third variable SEX survey data
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS, color = SEX)) +
geom_point(position = "jitter") +
geom_smooth(method = "lm", se = FALSE)
# Creating a scatter plot with the third variable SEX survey data
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS, color = as.factor(SEX)) +
geom_point(position = "jitter") +
geom_smooth(method = "lm", se = FALSE)
library(dplyr)
library(ggplot2)
library(readr)
library(corrplot)
#loading data into dataframe
mycols <- cols_only(
CHILDS = col_double(),
SIBS = col_double(),
SEX = col_factor()
)
gss2016.sub <- read_csv("C:/Users/saman/Documents/GitHub/BU-DSC/dataset/gss-2016.csv",
col_types = mycols)
# looking at the first few rows
head(gss2016.sub)
# Creating a scatter plot with the third variable SEX survey data
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS, color = SEX) +
geom_point(position = "jitter") +
geom_smooth(method = "lm", se = FALSE)
# Creating a scatter plot with the third variable SEX survey data
ggplot(data = gss2016.sub, aes(x = SIBS, y = CHILDS, color = SEX)) +
geom_point(position = "jitter") +
geom_smooth(method = "lm", se = FALSE)
# The formula for the linear model
fmla <- SIBS ~ CHILD
# Fitting the formula to a model
mod <- lm(fmla, data = gss2016.sub)
# The formula for the linear model
fmla <- SIBS ~ CHILDS
# Fitting the formula to a model
mod <- lm(fmla, data = gss2016.sub)
# Coeeficient of the model
Coef(mod)
library("broom", lib.loc="C:/Users/saman/.conda/envs/renv/Lib/R/library")
install.packages("broom")
knitr::opts_chunk$set(echo = FALSE)
# The formula for the linear model
fmla <- SIBS ~ CHILDS
# Fitting the formula to a model
mod <- lm(fmla, data = gss2016.sub)
# Coeeficient of the model
Coef(mod)
# The formula for the linear model
fmla <- SIBS ~ CHILDS
# Fitting the formula to a model
mod <- lm(fmla, data = gss2016.sub)
# Coeeficient of the model
# Coef(mod)
# Summary of the Model
Summary(mod)
# The formula for the linear model
fmla <- SIBS ~ CHILDS
# Fitting the formula to a model
mod <- lm(fmla, data = gss2016.sub)
# Coeeficient of the model
coef(mod)
# Summary of the Model
# Summary(mod)
# The formula for the linear model
fmla <- SIBS ~ CHILDS
# Fitting the formula to a model
mod <- lm(fmla, data = gss2016.sub)
# Coeeficient of the model
coef(mod)
# Summary of the Model
Summary(mod)
# The formula for the linear model
fmla <- SIBS ~ CHILDS
# Fitting the formula to a model
mod <- lm(fmla, data = gss2016.sub)
# Coeeficient of the model
coef(mod)
# Summary of the Model
Summary(mod)
# The formula for the linear model
fmla <- SIBS ~ CHILDS
# Fitting the formula to a model
mod <- lm(fmla, data = gss2016.sub)
# Coeeficient of the model
coef(mod)
summary(mod)
head(gss2016.sub)
head(gss2016.sub)
new_df <- data.frame("SIBS" = 3 )
str(new_df)
head(gss2016.sub)
new_df <- data.frame("SIBS" = 3 )
str(new_df)
new_df
head(gss2016.sub)
new_df <- data.frame("SIBS" = 3 )
str(new_df)
new_df
predict(mod, newdata = new_df )
# The formula for the linear model
fmla <- CHILDS ~ SIBS
# Fitting the formula to a model
mod <- lm(fmla, data = gss2016.sub)
# Coeeficient of the model
coef(mod)
summary(mod)
head(gss2016.sub)
new_df <- data.frame("SIBS" = 3 )
str(new_df)
new_df
predict(mod, newdata = new_df )
head(gss2016.sub)
new_df <- data.frame("SIBS" = 3 )
str(new_df)
new_df
predict(mod, newdata = new_df )
head(gss2016.sub)
new_df <- data.frame("SIBS" = 3 )
str(new_df)
new_df
predict(mod, newdata = new_df )
## head(gss2016.sub)
## new_df <- data.frame("SIBS" = 3 )
## str(new_df)
## new_df
gss2016.sub$CHILDS_P <- predict(mod)
## head(gss2016.sub)
new_df <- data.frame("SIBS" = 3 )
## str(new_df)
## new_df
pred <- predict(mod, newdata = new_df)
pred
# Created a new dataframe with 3 SIBS
new_df3 <- data.frame("SIBS" = 3 )
# Predicted no. of CHILDS
pred3 <- predict(mod, newdata = new_df)
pred3
# Created a new dataframe with 0 SIBS
new_df0 <- data.frame("SIBS" = 0 )
# Predicted no. of CHILDS
pred0 <- predict(mod, newdata = new_df0)
pred0
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(ggplot2)
library(corrplot)
library(readxl)
#populating the housing_data dataframe
wd <- getwd()
fname <- "week-7-housing.xlsx"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
housing_data <- read_excel(path_to_file,col_names=TRUE)
glimpse(housing_data)
head(housing_data)
#Selecting only some variables from the dataframe into our analysis dataframe set 1
housing_data_set1 <- housing_data %>% dplyr::select(`Sale Price`,bedrooms,bath_full_count,sq_ft_lot)
head(housing_data_set1)
ggplot(data = housing_data_set1, aes(x = sq_ft_lot, y = `Sale Price`)) +
geom_point() +
labs( title = "Plotting Sale Price against Lot size",
x = "Lot size in sq ft",
y = "Sale Price")
var1 <- lm(`Sale Price` ~ sq_ft_lot, data = housing_data_set1)
ggplot(data = housing_data_set1, aes(x = bedrooms, y = `Sale Price`, color = as.factor(bath_full_count))) +
geom_point() + geom_jitter() +
labs( title = "Plotting Sale Price against # of bedrooms",
x = "No. Of Bedrooms",
y = "Sale Price")
var2 <- lm(`Sale Price` ~ bedrooms + bath_full_count, data = housing_data_set1)
summary(var1)
## predict(var1, data.frame(sq_ft_lot = 6635))
summary(var2)
## predict(var2, data.frame(bedrooms = 5, bath_full_count = 3))
library(QuantPsyc)
install.packages("QuantPsyc")
library(QuantPsyc)
lm.beta(var2)
anova(var1, var2)
library(broom)
housing_data_set1.augment <- augment(var2)
## Adding the covariance ratio to the augmented data frame
housing_data_set1.augment$cov.ratios <- covratio(var2)
head(housing_data_set1.augment)
# lets create a new variable large.resid to store the lasrge residuals
housing_data_set1.augment$large.residual <- housing_data_set1.augment$.std.resid > 2 | housing_data_set1.augment$.std.resid < -2
# head(housing_data_set1.augment)
# sum of the large residuals
sum(housing_data_set1.augment$large.residual)
housing_data.large_resid <- housing_data_set1.augment %>%
dplyr::select(Sale.Price, bedrooms,bath_full_count,.std.resid,large.residual) %>%
dplyr::filter(large.residual == TRUE)
housing_data.large_resid
housing_data.lev <- housing_data_set1.augment %>%
dplyr::select(Sale.Price, bedrooms,bath_full_count,.hat,.cooksd,cov.ratios,large.residual) %>%
dplyr::filter(large.residual == TRUE)
# showing rows with Cook's distance > 1
housing_data.lev %>%
filter(.cooksd > 1)
# showing rows with leverage > .0006
housing_data.lev %>%
filter(.hat > .0006)
# showing rows with cov ratio > 1.0006 & < .9994
housing_data.lev %>%
filter(cov.ratios > 1.0006 | cov.ratios < .9994)
library(lmtest)
install.packages("lmtest")
library(lmtest)
dwtest(var2)
# head(housing_data_set1.augment)
histogram <- ggplot(housing_data_set1.augment, aes(.std.resid)) +
# opts(legend.position = "none") +
geom_histogram(aes(y = ..density..), colour = "black", fill = "white") +
labs(x = "Standardized Residual", y = "Density")
histogram +
stat_function(fun = dnorm, args = list(mean = mean(housing_data_set1.augment$.std.resid, na.rm = TRUE),
sd = sd(housing_data_set1.augment$.std.resid, na.rm = TRUE)), colour = "red", size = 1)
# head(housing_data_set1.augment)
scatter <- ggplot(housing_data_set1.augment, aes(x = .fitted, y= .std.resid))
scatter + geom_point() +
geom_smooth(method = "lm", colour = "Blue") +
labs(x = "FittedValues", y = "Standardized Residual")
plot(var2)
hist(var2)
head(housing_data_set1.augment)
## hist(var2)
## head(housing_data_set1.augment)
hist(housing_data_set1.augment$.std.resid)
library("car", lib.loc="C:/Users/saman/.conda/envs/renv/Lib/R/library")
library(VIF)
library(car)
## vif(var2)
library(car)
car::vif(var2)
library(car)
vif1 <- car::vif(var2)
tolerance <- 1/vif1
library(car)
vif1 <- car::vif(var2)
tolerance <- 1/vif1
vif1
tolerance
