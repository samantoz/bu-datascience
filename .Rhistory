path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_first_df <- read.arff(path_to_file)
glimpse(my_first_df)
library(foreign)
library(ggplot2)
library(dplyr)
#populating the housing_data dataframe
wd <- getwd()
fname <- "ThoraricSurgery.arff"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_first_df <- read.arff(path_to_file)
glimpse(my_first_df)
head(my_first_df)
# Building the dataframe for analysis
survive <- my_first_df
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1yr ~ ., data = survive, family = binomial)
# Building the dataframe for analysis
survive <- my_first_df
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = binomial)
tidy(survive_m)
# Building the dataframe for analysis
survive <- my_first_df
# load library
library(tidyr)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = binomial)
tidy(survive_m)
# Building the dataframe for analysis
survive <- my_first_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = binomial)
tidy(survive_m)
# Building the dataframe for analysis
survive <- my_first_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = binomial)
out_survive_m <- tidy(survive_m)
out_survive_m <- tidy(survive_m)
head(out_survive_m)
out_survive_m %>%
sort(p.value desc)
head(out_survive_m)
out_survive_m %>%
sort(p.value, decreasing = TRUE)
out_survive_m %>%
order(p.value)
out_surive_m[order(out_surive_m$p.value),]
out_survive_m <- tidy(survive_m)
head(out_survive_m)
out_surive_m[order(out_surive_m$p.value),]
out_survive_m[order(out_surive_m$p.value),]
out_survive_m[order(out_survive_m$p.value),]
# Building the dataframe for analysis
survive <- my_first_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = binomial)
out_survive_m <- tidy(survive_m)
head(out_survive_m)
out_survive_m[order(out_survive_m$p.value, decreasing = FALSE),]
# Building the dataframe for analysis
survive <- my_first_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = binomial)
out_survive_m <- tidy(survive_m)
head(out_survive_m)
out_survive_m[order(out_survive_m$p.value, decreasing = TRUE),]
knitr::opts_chunk$set(echo = FALSE)
#populating the housing_data dataframe
wd <- getwd()
fname <- "ThoraricSurgery.arff"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.arff(path_to_file)
library(foreign)
library(ggplot2)
library(dplyr)
#populating the housing_data dataframe
wd <- getwd()
fname <- "ThoraricSurgery.arff"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.arff(path_to_file)
glimpse(my_init_df)
head(my_init_df)
#populating the housing_data dataframe
wd <- getwd()
fname <- "ThoraricSurgery.arff"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.arff(path_to_file)
glimpse(my_init_df)
summary(my_init_df)
head(my_init_df)
# Building the dataframe for analysis
survive <- my_init_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = "binomial")
# Using tidy function from the broom package
out_survive_m <- tidy(survive_m)
# Looking for the snapshot of the output of the model
head(out_survive_m)
#Ordering the output based on the p value
out_survive_m[order(out_survive_m$p.value, decreasing = TRUE),]
# Building the dataframe for analysis
survive <- my_init_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = "binomial")
# Using tidy function from the broom package
out_survive_m <- tidy(survive_m)
# Looking for the snapshot of the output of the model
head(out_survive_m)
#Ordering the output based on the p value
# out_survive_m[order(out_survive_m$p.value, decreasing = TRUE),]
# Building the dataframe for analysis
survive <- my_init_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = "binomial")
summary(survive_m)
# Using tidy function from the broom package
# out_survive_m <- tidy(survive_m)
# Looking for the snapshot of the output of the model
#head(out_survive_m)
#Ordering the output based on the p value
# out_survive_m[order(out_survive_m$p.value, decreasing = TRUE),]
# Building the dataframe for analysis
survive <- my_init_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = "binomial")
summary(survive_m)
# Using tidy function from the broom package
out_survive_m <- tidy(survive_m)
# Looking for the snapshot of the output of the model
#head(out_survive_m)
#Ordering the output based on the p value
# out_survive_m[order(out_survive_m$p.value, decreasing = TRUE),]
# Building the dataframe for analysis
survive <- my_init_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = "binomial")
summary(survive_m)
# Using tidy function from the broom package
out_survive_m <- tidy(survive_m)
# Looking for the snapshot of the output of the model
out_survive_m
#Ordering the output based on the p value
# out_survive_m[order(out_survive_m$p.value, decreasing = TRUE),]
# Building the dataframe for analysis
survive <- my_init_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = "binomial")
summary(survive_m)
# Using tidy function from the broom package
out_survive_m <- tidy(survive_m)
# Looking for the snapshot of the output of the model
## out_survive_m
#Ordering the output based on the p value
out_survive_m[order(out_survive_m$estimate, decreasing = TRUE),]
View(my_init_df)
augment(survive_m)
library(ggplot2)
library(dplyr)
#populating the housing_data dataframe
wd <- getwd()
fname <- "binary-classifier-data.csv"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.csv(path_to_file, header = TRUE)
glimpse(my_init_df)
summary(my_init_df)
head(my_init_df)
#populating the housing_data dataframe
wd <- getwd()
fname <- "binary-classifier-data.csv"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.csv(path_to_file, header = TRUE)
summary(my_init_df)
head(my_init_df)
#populating the housing_data dataframe
wd <- getwd()
fname <- "binary-classifier-data.csv"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.csv(path_to_file, header = TRUE)
glimpse(my_init_df)
head(my_init_df)
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, color = label))
my_plot <- my_plot + geom_point()
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = label))
my_plot <- my_plot + geom_point()
View(my_plot)
binary_data <- my_init_df
summary(binary_data)
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = label))
my_plot <- my_plot + geom_point(aes(size = 5))
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = as.factor(label)))
my_plot <- my_plot + geom_point(aes(size = 5))
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = as.factor(label)))
my_plot <- my_plot + geom_point(aes(size = 5))
my_plot
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = as.factor(label)))
my_plot <- my_plot + geom_point(aes(size = 1))
my_plot
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = as.factor(label)))
my_plot <- my_plot + geom_point()
my_plot
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = as.factor(label)))
my_plot <- my_plot + geom_point()
my_plot <- my_plot + xlab("X") + ylab("Y") + scale_color_discrete(name = "Label")
my_plot
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = label))
my_plot <- my_plot + geom_point()
my_plot <- my_plot + xlab("X") + ylab("Y") + scale_color_discrete(name = "Label")
my_plot
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = as.factor(label)))
my_plot <- my_plot + geom_point()
my_plot <- my_plot + xlab("X") + ylab("Y") + scale_color_discrete(name = "Label")
my_plot
binary_data.m <- glm(label ~ x + y, data = binary_data, family = "binomial")
summary(binary_data.m)
binary_data.m <- glm(label ~ x + y, data = binary_data, family = binomial)
summary(binary_data.m)
knitr::opts_chunk$set(echo = FALSE)
# Grouping the data set into 2 clusters: km_binary_data
km_binary_data <- kmeans(binary_data, 2)
# Grouping the data set into 2 clusters: km_binary_data
km_binary_data <- kmeans(binary_data, 2)
km_binary_data$cluster
# Grouping the data set into 2 clusters: km_binary_data
km_binary_data <- kmeans(binary_data, 2)
#visualizing the cluster using plot
plot(binary_data, km_binary_data$cluster)
# Grouping the data set into 2 clusters: km_binary_data
km_binary_data <- kmeans(binary_data, 2)
#visualizing the cluster using plot
plot(binary_data, col = km_binary_data$cluster)
# Grouping the data set into 2 clusters: km_binary_data
km_binary_data <- kmeans(binary_data, 2)
#visualizing the cluster using plot
plot(binary_data, col = km_binary_data$cluster)
km_binary_data$centers
km_binary_data.df <- binary_data[(x:y),]
km_binary_data.df <- binary_data[x:y,]
km_binary_data.df <- binary_data[,x:y]
km_binary_data.df <- select(binary_data, x,y)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
km_binary_data.df <- select(binary_data, x,y)
summary(km_binary_data.df)
km_binary_data <- kmeans(km_binary_data.df, 2)
plot(km_binary_data, col = km_binary_data$cluster)
summary(km_binary_data)
plot(km_binary_data.df, col = km_binary_data$cluster)
km_binary_data$centers
knitr::opts_chunk$set(echo = FALSE)
library(foreign)
library(ggplot2)
library(dplyr)
#populating the housing_data dataframe
wd <- getwd()
fname <- "ThoraricSurgery.arff"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.arff(path_to_file)
glimpse(my_init_df)
summary(my_init_df)
head(my_init_df)
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(dplyr)
#populating the housing_data dataframe
wd <- getwd()
fname <- "binary-classifier-data.csv"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.csv(path_to_file, header = TRUE)
summary(my_init_df)
head(my_init_df)
#random selection of 70% data.
set.seed(123)
dat.d <- sample(1:nrow(binary_data),size=nrow(binary_data)*0.7,replace = FALSE)
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = as.factor(label)))
my_plot <- my_plot + geom_point()
my_plot <- my_plot + xlab("X") + ylab("Y") + scale_color_discrete(name = "Label")
my_plot
binary_data.m <- glm(label ~ x + y, data = binary_data, family = binomial)
summary(binary_data.m)
#random selection of 70% data.
set.seed(123)
dat.d <- sample(1:nrow(binary_data),size=nrow(binary_data)*0.7,replace = FALSE)
train.binary_data <- binary_data[dat.d,] # 70% training data
test.binary_data <- binary_data[-dat.d,] # remaining 30% test data
train.binary_data.glm <- glm(label ~ x + y, data = train.binary_data, family = binomial)
summary(train.binary_data.glm)
pred <- predict(train.binary_data.glm, newdata = test.binary_data)
pred
str(pred)
summary(pred)
pred1 <- predict(train.binary_data.glm, newdata = test.binary_data, type = "response")
View(test.binary_data)
accuracy <- table(pred, test.binary_data[,"label"])
View(test.binary_data)
sum(diag(accuracy))/sum(accuracy)
confusionMatrix(data = pred, test.binary_data$label)
library(caret)
caret::confusionMatrix(data = pred, test.binary_data$label)
detach("package:dplyr", unload=TRUE)
accuracy
table(pred, test.binary_data$label)
library(foreign)
library(ggplot2)
library(dplyr)
#populating the housing_data dataframe
wd <- getwd()
fname <- "ThoraricSurgery.arff"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.arff(path_to_file)
glimpse(my_init_df)
summary(my_init_df)
head(my_init_df)
# Building the dataframe for analysis
survive <- my_init_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = binomial)
summary(survive_m)
# Using tidy function from the broom package
out_survive_m <- tidy(survive_m)
# Looking for the snapshot of the output of the model
## out_survive_m
#Ordering the output based on the p value
out_survive_m[order(out_survive_m$estimate, decreasing = TRUE),]
augment(survive_m)
# augment(survive_m)
pred <- predict(survive_m, newdata = survive, type ="response")
# augment(survive_m)
pred <- predict(survive_m, newdata = survive, type ="response")
table(survive$Risk1Yr, pred)
# augment(survive_m)
pred <- predict(survive_m, newdata = survive, type ="class")
# augment(survive_m)
pred <- predict(survive_m, newdata = survive, type ="response")
table(survive$Risk1Yr, pred)
summary(pred)
head(pred)
str(pred)
augment(survive_m)
# augment(survive_m)
pred <- predict(survive_m, newdata = survive, type ="response")
## table(survive$Risk1Yr, pred)
library(caret)
# augment(survive_m)
pred <- predict(survive_m, newdata = survive, type ="response")
## table(survive$Risk1Yr, pred)
library(caret)
caret::confusionMatrix(survive$Risk1Yr, pred, threshold = optCutOff)
# Building the dataframe for analysis
survive <- my_init_df
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~ ., data = survive, family = binomial(link = "logit"))
summary(survive_m)
# Using tidy function from the broom package
out_survive_m <- tidy(survive_m)
# Looking for the snapshot of the output of the model
## out_survive_m
#Ordering the output based on the p value
out_survive_m[order(out_survive_m$estimate, decreasing = TRUE),]
library(InformationValue)
install.packages("InformationValue")
library(InformationValue)
survive <- my_init_df
survive$IsAlive <- ifelse(survive$Risk1Yr=="Y",1,0)
survive$IsAlive <- as.factor(survive$IsAlive)
summary(survive)
survive <- my_init_df
survive$IsAlive <- ifelse(survive$Risk1Yr=="F",1,0)
survive$IsAlive <- as.factor(survive$IsAlive)
summary(survive)
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(IsAlive ~ ., data = survive, family = binomial(link = "logit"))
summary(survive_m)
out_survive_m <- tidy(survive_m)
out_survive_m[order(out_survive_m$estimate, decreasing = TRUE),]
survive_m <- glm(IsAlive ~ .,-Risk1Yr, data = survive, family = binomial(link = "logit"))
survive <- my_init_df
survive$IsAlive <- ifelse(survive$Risk1Yr=="F",1,0)
survive$IsAlive <- as.factor(survive$IsAlive)
summary(survive)
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(IsAlive ~.,-Risk1Yr, data = survive, family = binomial(link = "logit"))
survive <- my_init_df
survive$Risk1Yr <- ifelse(survive$Risk1Yr=="T",1,0)
survive$Risk1Yr <- as.factor(survive$Risk1Yr)
summary(survive)
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(IsAlive ~., data = survive, family = binomial(link = "logit"))
survive <- my_init_df
survive$Risk1Yr <- ifelse(survive$Risk1Yr=="T",1,0)
survive$Risk1Yr <- as.factor(survive$Risk1Yr)
summary(survive)
# load library
library(broom)
# Applying the glm function for the logistic regression
survive_m <- glm(Risk1Yr ~., data = survive, family = binomial(link = "logit"))
summary(survive_m)
out_survive_m <- tidy(survive_m)
# Looking for the snapshot of the output of the model
## out_survive_m
#Ordering the output based on the p value
out_survive_m[order(out_survive_m$estimate, decreasing = TRUE),]
# augment(survive_m)
pred <- predict(survive_m, newdata = survive, type ="response")
## table(survive$Risk1Yr, pred)
library(InformationValue)
optCutOff <- optimalCutoff()
# augment(survive_m)
pred <- predict(survive_m, newdata = survive, type ="response")
## table(survive$Risk1Yr, pred)
## library(InformationValue)
## optCutOff <- optimalCutoff()
## confusionMatrix(survive$Risk1Yr, pred, threshold = optCutOff)
# augment(survive_m)
pred <- predict(survive_m, newdata = survive, type ="response")
table(survive$Risk1Yr, pred)
## library(InformationValue)
## optCutOff <- optimalCutoff()
## confusionMatrix(survive$Risk1Yr, pred, threshold = optCutOff)
#random selection of 70% data.
set.seed(123)
dat.d <- sample(1:nrow(binary_data),size=nrow(binary_data)*0.7,replace = FALSE)
library(ggplot2)
library(dplyr)
#populating the housing_data dataframe
wd <- getwd()
fname <- "binary-classifier-data.csv"
path_to_file <- paste(wd,'/dataset/',fname, sep = "")
path_to_file
my_init_df <- read.csv(path_to_file, header = TRUE)
summary(my_init_df)
head(my_init_df)
# Creating a new data frame from the initial dataframe
binary_data <- my_init_df
my_plot <- ggplot(data = binary_data, aes(x = x, y = y, col = as.factor(label)))
my_plot <- my_plot + geom_point()
my_plot <- my_plot + xlab("X") + ylab("Y") + scale_color_discrete(name = "Label")
my_plot
#random selection of 70% data.
set.seed(123)
dat.d <- sample(1:nrow(binary_data),size=nrow(binary_data)*0.7,replace = FALSE)
train.binary_data <- binary_data[dat.d,] # 70% training data
test.binary_data <- binary_data[-dat.d,] # remaining 30% test data
dim(train.binary_data)
dim(test.binary_data)
train.binary_data.glm <- glm(label ~ x + y, data = train.binary_data, family = binomial)
summary(train.binary_data.glm)
