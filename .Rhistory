# Name: SAMANTA, ARINDAM
# Date: 04 DECEMBER 2019
# TASK 1. What are the observational units in this study?
rm(list = ls())
scores <- read.csv("scores.csv", header = TRUE)
attach(scores)
sink("assignment_2.1_TestScores_SamantaArindam.txt")
# listing the names of the obervational units in my data set
names(scores)
# determine which variables are categorical and which are quantitative
str(scores)
# variable to hold subset of the dataset that contains only Regular section
print(regular_data <- scores[which(scores$Section == "Regular"),])
print(regular_data)
# variable to hold subset of the dataset that contains only Sport section
print(sport_data <- scores[which(scores$Section == "Sports"),])
print(sport_data)
sink()
# Assignment: ASSIGNMENT 2.1 Test SCores
# Name: SAMANTA, ARINDAM
# Date: 04 DECEMBER 2019
# TASK 1. What are the observational units in this study?
rm(list = ls())
scores <- read.csv("scores.csv", header = TRUE)
attach(scores)
sink("assignment_2.1_TestScores_SamantaArindam.txt")
# listing the names of the obervational units in my data set
names(scores)
# determine which variables are categorical and which are quantitative
str(scores)
# variable to hold subset of the dataset that contains only Regular section
print(regular_data <- scores[which(scores$Section == "Regular"),])
## print(regular_data)
# variable to hold subset of the dataset that contains only Sport section
print(sport_data <- scores[which(scores$Section == "Sports"),])
## print(sport_data)
sink()
ls()
del()
rm()
?read_csv
??read.csv
?read.csv
str(scores)
# TASK 1. What are the observational units in this study?
rm(list = ls())
scores <- read.csv("scores.csv", header = TRUE)
attach(scores)
# sink("assignment_2.1_TestScores_SamantaArindam.txt")
# listing the names of the obervational units in my data set
names(scores)
# determine which variables are categorical and which are quantitative
str(scores)
head(scores)
# sink("assignment_2.1_TestScores_SamantaArindam.txt")
# listing the names of the obervational units in my data set
names(scores)
# determine which variables are categorical and which are quantitative
str(scores)
summary(scores)
regular_data <- subset(scores, subset = scores$Section == "Regular")
regular_data
# variable to hold subset of the dataset that contains only Sport section
sports_data <- subset(scores, subset = scores$Section == "Sports")
sports_data
# determine which variables are categorical and which are quantitative
str(scores)
View(scores)
summary(regular_data)
summary(regular_data$Count)
x <- regular_data$Count
x <- regular_data$Count
y <- regular_data$Score
plot(x,y)
scores <- read_csv("scores.csv", header = TRUE)
# TASK 1. What are the observational units in this study?
rm(list = ls())
install.packages("data.table")
library(data.table)
scores <- read_csv("scores.csv", header = TRUE)
scores <- fread(scores)
scores <- fread(scores.csv)
scores <- fread("scores.csv")
# scores <- read.csv("scores.csv", header = TRUE)
attach(scores)
# determine which variables are categorical and which are quantitative
str(scores)
# TASK 1. What are the observational units in this study?
rm(list = ls())
scores <- read.csv("scores.csv", header = TRUE)
scores$count <- factor(scores$count)
scores$count <- factor(character(scores$count))
# determine which variables are categorical and which are quantitative
str(scores)
scores <- read.csv("scores.csv", header = TRUE)
scores$count <- factor(scores$count)
scores$count <- character(scores$count)
scores$count <- as.character(scores$count)
scores$count <- as.factor(scores$count)
attach(scores)
# determine which variables are categorical and which are quantitative
str(scores)
scores$count <- tostring(scores$count)
scores$count <- toString(scores$count)
# determine which variables are categorical and which are quantitative
str(scores)
scores$Course <- toString(scores$Count)
# determine which variables are categorical and which are quantitative
str(scores)
scores <- read.csv("scores.csv", header = TRUE)
# determine which variables are categorical and which are quantitative
str(scores)
scores$Course <- as.factor(toString(scores$Count))
# determine which variables are categorical and which are quantitative
str(scores)
scores <- read.csv("scores.csv", header = TRUE)
# determine which variables are categorical and which are quantitative
str(scores)
names(scores)
str(scores)
regular_data <- subset(scores, subset = scores$Section == "Regular")
summary(regular_data)
# variable to hold subset of the dataset that contains only Sport section
sports_data <- subset(scores, subset = scores$Section == "Sports")
summary(sports_data)
x <- scores$Section
y <- scores$Score
plot(x,y)
summary(regular_data)
summary(sports_data)
x <- scores$Score
y <- scores$Count
plot(x,y)
x <- regular_data$Score
y <- regular_data$Count
plot(x,y)
x <- regular_data$Count
y <- regular_data$Score
plot(x,y)
regular_data <- scores[,scores$Section = "Regular"]
regular_data <- scores[,scores$Section == "Regular"]
regular_data <- scores[,Section == "Regular"]
regular_data <- scores[,Section = "Regular"]
regularData <- scores[Section == "Regular",]
summary(regularData)
# 3) variable to hold subset of the dataset that contains only Sport section
sportsData <- subset(scores, subset = scores$Section == "Sports")
summary(sportsData)
x <- regularData$Score
y <- regularData$Count
plot(x,y)
x <- sportsData$Score
y <- sportsData$Count
plot(x,y)
# plotting the Regular sections score and #of students achieving the score
plot(regularData$Score,regularData$Count,
main = "Regular Section Score",
xlab = "SCore",
ylab = "# of students")
# plotting the Regular sections score and #of students achieving the score
plot(regularData$Score,regularData$Count,
main = "Regular Section Score",
xlab = "Score",
ylab = "# of students")
# plotting the Sports sections score and #of students achieving the score
plot(sportsData$Score,sportsData$Count,
main = "Sports Section Score",
xlab = "SCore",
ylab = "# of students")
# plotting the Regular sections score and #of students achieving the score
boxplot(regularData$Score,regularData$Count,
main = "Regular Section Score",
xlab = "Score",
ylab = "# of students")
# plotting the Sports sections score and #of students achieving the score
plot(sportsData$Score,sportsData$Count,
main = "Sports Section Score",
xlab = "Score",
ylab = "# of students")
# plotting the Sports sections score and #of students achieving the score
boxplot(sportsData$Score,sportsData$Count,
main = "Sports Section Score",
xlab = "Score",
ylab = "# of students")
# plotting the Regular sections score and #of students achieving the score
plot(regularData$Score,regularData$Count,
main = "Regular Section Score",
xlab = "Score",
ylab = "# of students")
# plotting the Sports sections score and #of students achieving the score
plot(sportsData$Score,sportsData$Count,
main = "Sports Section Score",
xlab = "Score",
ylab = "# of students")
boxplot(scores$Section)
boxplot(scores$Scores)
boxplot(scores)
boxplot(scores$Count)
boxplot(scores$Scores)
boxplot(Score ~ Count, data = scores)
boxplot(Score ~ Section, data = scores)
boxplot(Score ~ Section, data = scores,
main "Box Plot",
xlab = "Section",
ylab = "Scores")
boxplot(Score ~ Section, data = scores,
xlab = "Section",
ylab = "Scores")
boxplot(Score ~ Section, data = scores,
xlab = "Section",
ylab = "Scores")
title("Box Plot")
# Assignment: ASSIGNMENT 2.1 Test Scores
# Name: SAMANTA, ARINDAM
# Date: 14 DECEMBER 2019
# TASK 2.1
rm(list = ls())
scores <- read.csv("scores.csv", header = TRUE)
attach(scores)
sink("assignment_2.1_TestScores_SamantaArindam.txt")
# 1) listing the names of the obervational units in my data set
names(scores)
# 2) determine which variables are categorical and which are quantitative
# Count is quantitative
# Score is quantitative
# Section is categorical
str(scores)
# 3) variable to hold subset of the dataset that contains only Regular section
regularData <- scores[Section == "Regular",]
summary(regularData)
# 3) variable to hold subset of the dataset that contains only Sport section
sportsData <- subset(scores, subset = scores$Section == "Sports")
summary(sportsData)
sink()
sink("assignment_2.1_plot_regularData_SamantaArindam.pdf")
# plotting the Regular sections score and #of students achieving the score
plot(regularData$Score,regularData$Count,
main = "Regular Section Score",
xlab = "Score",
ylab = "# of students")
sink()
sink("assignment_2.1_plot_sportsData_SamantaArindam.pdf")
# plotting the Sports sections score and #of students achieving the score
plot(sportsData$Score,sportsData$Count,
main = "Sports Section Score",
xlab = "Score",
ylab = "# of students")
sink()
sink("assignment_2.1_boxplot_all_SamantaArindam.pdf")
boxplot(Score ~ Section, data = scores,
xlab = "Section",
ylab = "Scores")
title("Box Plot showing both the sections")
sink()
# Assignment: ASSIGNMENT 2.1 Test Scores
# Name: SAMANTA, ARINDAM
# Date: 14 DECEMBER 2019
# TASK 2.1
rm(list = ls())
scores <- read.csv("scores.csv", header = TRUE)
attach(scores)
sink("assignment_2.1_TestScores_SamantaArindam.txt")
# 1) listing the names of the obervational units in my data set
names(scores)
# 2) determine which variables are categorical and which are quantitative
# Count is quantitative
# Score is quantitative
# Section is categorical
str(scores)
# 3) variable to hold subset of the dataset that contains only Regular section
regularData <- scores[Section == "Regular",]
summary(regularData)
# 3) variable to hold subset of the dataset that contains only Sport section
sportsData <- subset(scores, subset = scores$Section == "Sports")
summary(sportsData)
sink()
jpeg("assignment_2.1_plot_regularData_SamantaArindam.pdf")
# plotting the Regular sections score and #of students achieving the score
plot(regularData$Score,regularData$Count,
main = "Regular Section Score",
xlab = "Score",
ylab = "# of students")
graphics.off()
jpeg("assignment_2.1_plot_sportsData_SamantaArindam.pdf")
# plotting the Sports sections score and #of students achieving the score
plot(sportsData$Score,sportsData$Count,
main = "Sports Section Score",
xlab = "Score",
ylab = "# of students")
graphics.off()
jpeg("assignment_2.1_boxplot_all_SamantaArindam.pdf")
boxplot(Score ~ Section, data = scores,
xlab = "Section",
ylab = "Scores")
title("Box Plot showing both the sections")
graphics.off()
# Assignment: ASSIGNMENT 2.1 Test Scores
# Name: SAMANTA, ARINDAM
# Date: 14 DECEMBER 2019
# TASK 2.1
rm(list = ls())
scores <- read.csv("scores.csv", header = TRUE)
attach(scores)
sink("assignment_2.1_TestScores_SamantaArindam.txt")
# 1) listing the names of the obervational units in my data set
print(names(scores))
# 2) determine which variables are categorical and which are quantitative
# Count is quantitative
# Score is quantitative
# Section is categorical
print(str(scores))
# 3) variable to hold subset of the dataset that contains only Regular section
regularData <- scores[Section == "Regular",]
print(summary(regularData))
# 3) variable to hold subset of the dataset that contains only Sport section
sportsData <- subset(scores, subset = scores$Section == "Sports")
print(summary(sportsData))
sink()
pdf("assignment_2.1_plot_regularData_SamantaArindam.pdf")
# plotting the Regular sections score and #of students achieving the score
plot(regularData$Score,regularData$Count,
main = "Regular Section Score",
xlab = "Score",
ylab = "# of students")
graphics.off()
pdf("assignment_2.1_plot_sportsData_SamantaArindam.pdf")
# plotting the Sports sections score and #of students achieving the score
plot(sportsData$Score,sportsData$Count,
main = "Sports Section Score",
xlab = "Score",
ylab = "# of students")
graphics.off()
pdf("assignment_2.1_boxplot_all_SamantaArindam.pdf")
boxplot(Score ~ Section, data = scores,
xlab = "Section",
ylab = "Scores")
title("Box Plot showing both the sections")
graphics.off()
plot(scores$Section,scores$Score,
main = "Regular Section Score",
xlab = "Score",
ylab = "# of students")
plot(scores$Section,scores$Score,
main = "Section vs Scores",
xlab = "Section",
ylab = "Scores achieved by students")
<<<<<<< HEAD
install.packages(c("askpass", "backports", "BH", "blob", "boot", "broom", "callr", "caret", "caTools", "cli", "clipr", "cluster", "curl", "DBI", "dbplyr", "digest", "dplyr", "ellipsis", "evaluate", "foreach", "foreign", "formatR", "fs", "glmnet", "gower", "haven", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "ipred", "IRkernel", "iterators", "KernSmooth", "knitr", "later", "lava", "markdown", "MASS", "Matrix", "mgcv", "mime", "modelr", "mongolite", "nlme", "numDeriv", "odbc", "openssl", "pillar", "pkgconfig", "plyr", "processx", "prodlim", "profvis", "progress", "promises", "purrr", "quantmod", "R6", "Rcpp", "recipes", "repr", "reprex", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rvest", "scales", "selectr", "shiny", "sparklyr", "survival", "sys", "tibble", "tidyr", "tidyverse", "tinytex", "TTR", "whisker", "xfun", "xml2", "zoo"))
# TASK 2.1
rm(list = ls())
# Load the libraries needed
library(ggplot)
library(ggplot2)
library(tidyr)
library("readr", lib.loc="C:/Users/saman/.conda/envs/renv/Lib/R/library")
library(readr)
install.packages("readr")
install.packages("tidyr")
install.packages("ggplot2")
acs <- read_csv("acs-14-1yr-s0201.csv")
library(readr)
acs <- read_csv("acs-14-1yr-s0201.csv")
str(acs)
head(acs)
head(acs)
nrow(acs)
ncol(acs)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram()
library(ggplot2)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram()
ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..density..), binwidth = 0.1)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..density..), binwidth = 10)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..density..), binwidth = 5)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..density..), binwidth = 10)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram(binwidth = 10)
nrow(subset(acs, HSDegree > 0 & HSDegree < 70))
nrow(subset(acs, HSDegree > 60 & HSDegree < 70))
nrow(subset(acs, HSDegree > 70 & HSDegree < 70))
nrow(subset(acs, HSDegree > 70 & HSDegree < 80))
nrow(subset(acs, HSDegree > 0 & HSDegree < 80))
nrow(subset(acs, HSDegree > 0 & HSDegree < 80))
df1 <- (subset(acs, HSDegree > 0 & HSDegree < 80))
df1
ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..count..), binwidth = 10)
df1 <- (subset(acs, HSDegree > 0 & HSDegree < 90))
df1
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, position = "identity")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, position = "identity", alpha = 0.4)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, position = "stack", alpha = 0.4)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, position = "dodge", alpha = 0.4)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, position = "stack", alpha = 0.4)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6)
nrows(subset(acs, HSDegree > 85 & HSDegree < 95))
nrow(subset(acs, HSDegree > 85 & HSDegree < 95))
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6) +
geom_label("Histogram of High SChool Degree Percentage")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6) +
geom_label(aes("Histogram of High SChool Degree Percentage"))
acs <- read_csv("acs-14-1yr-s0201.csv")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6)
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6) +
geom_label(aes("Histogram of High SChool Degree Percentage"))
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6) +
ggtitle("Histogram of High SChool Degree Percentage")
ggtitle("Histogram of High School Degree in %")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6) +
ggtitle("Histogram of High School Degree in %")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6) +
labs(title = "Histogram of High School Degree in %")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 10, alpha = 0.6) +
labs(title = "Histogram of High School Degree in %",
x = "HS Degree", y = "Count")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 2, alpha = 0.6) +
labs(title = "Histogram of High School Degree in %",
x = "HS Degree", y = "Count")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 2, alpha = 0.6) +
labs(title = "Histogram Using ggplot2",
x = "HS Degree %", y = "Count")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 5, alpha = 0.6) +
labs(title = "Histogram Using ggplot2",
x = "HS Degree %", y = "Count")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 3, alpha = 0.6) +
labs(title = "Histogram Using ggplot2",
x = "HS Degree %", y = "Count")
ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 3, alpha = 0.6) +
labs(title = "Histogram using ggplot2",
x = "HS Degree %", y = "Count")
gghist <- ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 3, alpha = 0.6) +
labs(title = "Histogram using ggplot2",
x = "HS Degree %", y = "Count")
=======
install.packages(c("ggplot2", "readr", "tidyr"))
rm(list = ls())
library(ggplot2)
library(tidyr)
library(readr)
acs <- read_csv("acs-14-1yr-s0201.csv")
>>>>>>> b89c584ee7236a72918edf36c222ff980e900ff5
gghist <- ggplot(acs, aes( x = HSDegree)) +
geom_histogram( binwidth = 3, alpha = 0.6) +
labs(title = "Histogram using ggplot2",
x = "HS Degree %", y = "Count")
gghist
<<<<<<< HEAD
gghist1 <- ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..density.. ), color = "black", fill = "white") +
labs(title = "Histogram using ggplot2",
x = "HS Degree %", y = "Density")
gghist1
gghist1 <- ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..density.. ), binwidth = 3, color = "black", fill = "white") +
labs(title = "Histogram using ggplot2",
x = "HS Degree %", y = "Density")
gghist1
gghist1 <- ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..density.. ), binwidth = 0.1, color = "black", fill = "white") +
labs(title = "Histogram using ggplot2",
x = "HS Degree %", y = "Density")
gghist1
gghist1 <- ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..density.. ), binwidth = 1, color = "black", fill = "white") +
labs(title = "Histogram using ggplot2",
x = "HS Degree %", y = "Density")
gghist1
ggdens + stat_function(fun = dnorm, args = list(mean = mean(acs$HSDegree, na.rm = TRUE),
sd = sd(acs$HSDegree, na.rm = TRUE)),
color = "red", size = 1 )
=======
>>>>>>> b89c584ee7236a72918edf36c222ff980e900ff5
ggdens <- ggplot(acs, aes( x = HSDegree)) +
geom_histogram(aes(y = ..density.. ), binwidth = 1, color = "black", fill = "white") +
labs(title = "Histogram using ggplot2",
x = "HS Degree %", y = "Density")
ggdens
ggdens + stat_function(fun = dnorm, args = list(mean = mean(acs$HSDegree, na.rm = TRUE),
sd = sd(acs$HSDegree, na.rm = TRUE)),
color = "red", size = 1 )
qplot(sample = acs$HSDegree, stat = "qq")
